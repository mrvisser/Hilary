/*!
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var Cassandra = require('oae-util/lib/cassandra');
var SearchAPI = require('oae-search');
var SearchConstants = require('oae-search/lib/constants').SearchConstants;


// Bind some plugins
require('oae-following/lib/activity');
require('oae-following/lib/principals');
require('oae-following/lib/search');

module.exports = function(config, callback) {
    _ensureSchema(function(err) {
    	if (err) {
    		return callback();
    	}

    	ensureSearchSchema(callback);
    });
};

/**
 * Create the following database schema
 *
 * @param  {Function}   callback        Standard callback function
 * @param  {Object}     callback.err    An error that occurred, if any
 * @api private
 */
var _ensureSchema = function(callback) {
    Cassandra.createColumnFamilies({
        'FollowingUsersFollowers': 'CREATE COLUMNFAMILY FollowingUsersFollowers (userId text PRIMARY KEY);',
        'FollowingUsersFollowing': 'CREATE COLUMNFAMILY FollowingUsersFollowing (userId text PRIMARY KEY);'
    }, callback);
};


/**
 * Create the following/followers search schema if it hasn't already been created
 *
 * @param  {Function}  callback        Invoked when the process completes
 * @param  {Object}    callback.err    An error that occurred, if any
 * @api private
 */
var ensureSearchSchema = function(callback) {
    // Gather all the search document schemas to auto-create them
    var followingSchema = require('./schemas/following');
    var followersSchema = require('./schemas/followers');

    // The below elastic search options mean:
    //
    //  * `_source: false` indicates that the _source field is disabled for the mapping, saving disk space as it is not needed
    //  * `_parent: ...` establishes a parent-child relationship from the resource document to its child documents.
    //
    // For more information, please see the elasticsearch mapping documentation:
    // http://www.elasticsearch.org/guide/reference/mapping/

    var childOpts = {
        '_source': false,
        '_parent': SearchConstants.resourceMappingName
    };
    SearchAPI.putMapping('following', followingSchema, childOpts, function(err) {
        if (err) {
            return callback(err);
        }

        SearchAPI.putMapping('followers', followersSchema, childOpts, callback);
    });
};
