/*!
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');

var AuthzAPI = require('oae-authz');
var AuthzUtil = require('oae-authz/lib/util');
var IndexTask = require('oae-search/lib/model').IndexTask;
var LibraryAPI = require('oae-library');
var MQ = require('oae-util/lib/mq');
var SearchAPI = require('oae-search');
var SearchConstants = require('oae-search/lib/constants').SearchConstants;
var SearchUtil = require('oae-search/lib/util');
var TenantsAPI = require('oae-tenants');

var DiscussionsAPI = require('./api');
var DiscussionsConstants = require('./constants').DiscussionsConstants;
var DiscussionsDAO = require('./internal/dao');



//////////////////////
// SEARCH ENDPOINTS //
//////////////////////

LibraryAPI.Search.registerLibrarySearch('discussion-library', 'discussion');



////////////////////
// INDEXING TASKS //
////////////////////

DiscussionsAPI.on(DiscussionsConstants.events.CREATED_DISCUSSION, function(ctx, discussion, members) {
    var indexTasks = [
        new IndexTask('discussion', {'id': discussion.id}),
        new IndexTask('discussion_members', {'id': discussion.id})
    ];
    SearchAPI.submitIndexTasks(indexTasks);
});

DiscussionsAPI.on(DiscussionsConstants.events.UPDATED_DISCUSSION, function(ctx, discussion, updatedDiscussion) {
    var indexTasks = [
        new IndexTask('discussion', {'id': discussion.id})
    ];
    SearchAPI.submitIndexTasks(indexTasks);
});

DiscussionsAPI.on(DiscussionsConstants.events.UPDATED_DISCUSSION_MEMBERS, function(ctx, discussion) {
    var indexTasks = [
        new IndexTask('discussion_members', {'id': discussion.id})
    ];
    SearchAPI.submitIndexTasks(indexTasks);
});

DiscussionsAPI.on(DiscussionsConstants.events.DELETED_DISCUSSION, function(ctx, discussionId) {
    MQ.submit(SearchConstants.mq.TASK_DELETE_DOCUMENT, {'resourceType': 'discussion', 'id': discussionId});
});



////////////////////////
// DOCUMENT PRODUCERS //
////////////////////////

/**
 * Produces a search document for 'discussion' resources
 *
 * @see SearchAPI#registerSearchDocumentProducer
 * @api private
 */
var _produceDiscussionSearchDocument = function(data, callback) {
    DiscussionsDAO.getDiscussion(data.id, function(err, discussion) {
        if (err || !discussion) {
            return callback(err);
        }

        // Allow full-text search on name and description, but only if they are specified. We also sort on this text
        var fullText = _.compact([discussion.displayName, discussion.description]).join(' ');

        // Add all properties for the resource document metadata
        var doc = {
            'resourceType': 'discussion',
            'id': discussion.id,
            'tenantAlias': discussion.tenant.alias,
            'displayName': discussion.displayName,
            'visibility': discussion.visibility,
            'q_high': discussion.displayName,
            'q_low': fullText,
            'sort': fullText,
            '_extra': {
                'lastModified': discussion.lastModified
            }
        };

        if (discussion.description) {
            doc.description = discussion.description;
        }

        return callback(null, doc);
    });
};

/**
 * Produces a search document for access scoping 'discussion' resources
 *
 * @see SearchAPI#registerSearchDocumentProducer
 * @api private
 */
var _produceDiscussionSearchMemberDocument = function(data, callback) {
    AuthzAPI.getAuthzMembers(data.id, null, 10000, function(err, members) {
        if (err) {
            return callback(err);
        }

        var memberIds = _.map(members, function(member) { return member.id; });
        var childDoc = SearchUtil.createMembersDocument(data.id, memberIds);
        return callback(null, childDoc);
    });
};

SearchAPI.registerSearchDocumentProducer('discussion', _produceDiscussionSearchDocument);
SearchAPI.registerSearchDocumentProducer('discussion_members', _produceDiscussionSearchMemberDocument);



///////////////////////////
// DOCUMENT TRANSFORMERS //
///////////////////////////

/**
 * Given an array of discussion search documents, transform them into search documents suitable to be displayed to the user in context.
 *
 * @param  {Context}   ctx             The current context
 * @param  {Object}    docs            A hash, keyed by the document id, while the value is the document to transform
 * @param  {Function}  callback        Invoked when the process completes
 * @param  {Object}    callback.err    An error that occurred, if any
 * @param  {Object}    callback.docs   The transformed docs, in the same form as the `docs` parameter.
 * @api private
 */
var _transformDiscussionDocuments = function(ctx, docs, callback) {
    var transformedDocs = {};
    var principalId = (ctx.user() ? ctx.user().id : null);
    _.each(docs, function(doc, docId) {
        var result = _.extend({}, doc.fields, {'id': doc['_id']});
        result.lastModified = doc.fields._extra.lastModified;
        result.tenant = TenantsAPI.getTenant(result.tenantAlias).compact();
        var resourceId = AuthzUtil.getResourceFromId(result.id).resourceId;
        result.profilePath = '/discussion/' + result.tenant.alias + '/' + resourceId;
        transformedDocs[docId] = result;
    });

    return callback(null, transformedDocs);
};

// Bind the transformer to the search API
SearchAPI.registerSearchDocumentTransformer('discussion', _transformDiscussionDocuments);

/////////////////////////
// REINDEX ALL HANDLER //
/////////////////////////

SearchAPI.registerReindexAllHandler('discussion', function(callback) {

    /*!
     * Handles each iteration of the DiscussionDAO iterate all method, firing tasks for all discussions to
     * be reindexed.
     *
     * @see DiscussionDAO#iterateAll
     * @api private
     */
    var _onEach = function(discussionRows, done) {
        // Batch up this iteration of task resources
        var indexTasks = [];
        _.each(discussionRows, function(discussionRow) {
            indexTasks.push(new IndexTask('discussion', {'id': discussionRow.id}));
            indexTasks.push(new IndexTask('discussion_members', {'id': discussionRow.id}));
        });
        SearchAPI.submitIndexTasks(indexTasks, done);
    };

    DiscussionsDAO.iterateAll(['id'], 100, _onEach, callback);
});
