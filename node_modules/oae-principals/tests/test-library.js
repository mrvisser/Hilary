/*!
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');

var Cassandra = require('oae-util/lib/cassandra');
var LibraryAPI = require('oae-library');
var RestAPI = require('oae-rest');
var SearchConstants = require('oae-search/lib/constants').SearchConstants;
var SearchTestsUtil = require('oae-search/lib/test/util');
var TestsUtil = require('oae-tests');

var PrincipalsConstants = require('oae-principals/lib/constants').PrincipalsConstants;
var PrincipalsTestsUtil = require('oae-principals/lib/test/util');

describe('Memberships Library', function() {

    // REST contexts we can use to do REST requests
    var globalAdminOnTenantRestContext = null;
    var camAdminRestContext = null;

    before(function(callback) {
        camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);

        // Authenticate the global admin into a tenant so we can perform user-tenant requests with a global admin to test their access
        RestAPI.Admin.loginOnTenant(TestsUtil.createGlobalAdminRestContext(), 'localhost', function(err, ctx) {
            assert.ok(!err);
            globalAdminOnTenantRestContext = ctx;
            return callback();
        });
    });

    /**
     * Ensure the `one` array of string ids contains the exact same elements as in the `other` array of string ids
     *
     * @param  {String[]}   one     One array to compare
     * @param  {String[]}   other   The other array to compare
     * @api private
     */
    var _assertArraysEqual = function(one, other) {
        assert.ok(one);
        assert.ok(other);
        assert.strictEqual(one.length, other.length);
        assert.strictEqual(_.intersection(one, other).length, other.length);
    };

    describe('General', function() {

        /**
         * Test that verifies the memberships library rebuilds when deleted
         */
        it('verify the memberships library automatically rebuilds and pages when purged', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users) {
                assert.ok(!err);
                var branden = _.values(users)[0];
                var simon = _.values(users)[1];

                // We need 110 groups because the paging size while rebuilding is 100
                PrincipalsTestsUtil.generateTestGroups(branden.restContext, 110, function(groups) {
                    var groupIds = _.pluck(groups, 'id');
                    assert.equal(groupIds.length, 110);

                    // Sanity check the library to ensure we get all the groups back
                    PrincipalsTestsUtil.getFullMembershipsLibrary(simon.restContext, branden.user.id, function(membershipsBefore) {

                        // Ensure we get exactly all the same 110 groups back
                        var responseIds = _.pluck(membershipsBefore, 'id');
                        assert.equal(responseIds.length, 110);
                        _.each(responseIds, function(responseId) {
                            assert.ok(_.contains(groupIds, responseId));
                        });

                        // Delete the group memberships library
                        LibraryAPI.Index.purge(PrincipalsConstants.library.MEMBERSHIPS_INDEX_NAME, branden.user.id, function(err) {
                            assert.ok(!err);

                            // List the group memberships library, rebuilding the library
                            PrincipalsTestsUtil.getFullMembershipsLibrary(simon.restContext, branden.user.id, function(membershipsAfter) {
                                assert.equal(membershipsAfter.length, 110);

                                // Ensure we get exactly all the same 110 groups back in the same order
                                for (var i = 0; i < membershipsBefore.length; i++) {
                                    var membershipBefore = membershipsBefore[i];
                                    var membershipAfter = membershipsAfter[i];
                                    assert.ok(membershipBefore.id);
                                    assert.equal(membershipBefore.id, membershipAfter.id);
                                }

                                return callback();
                            });
                        });
                    });
                });
            });
        });

        /**
         * Verify the memberships library transitions properly from empty lastModified dates to having lastModified dates
         */
        it('verify migration from group in memberships library without lastModified to group with lastModified', function(callback) {
            // Generate a user who has a library and a user who can see the library
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users) {
                assert.ok(!err);
                var branden = _.values(users)[0];
                var simon = _.values(users)[1];

                // Generate 2 groups to be in branden's library
                PrincipalsTestsUtil.generateTestGroups(branden.restContext, 2, function(groups) {

                    // Update both groups through a back door to not have a lastModified
                    Cassandra.runQuery('DELETE lastModified FROM Principals USING CONSISTENCY QUORUM WHERE principalId IN (?)', [_.pluck(groups, 'id')], function(err) {
                        assert.ok(!err);

                        // Trigger the library to build
                        PrincipalsTestsUtil.getFullMembershipsLibrary(simon.restContext, branden.user.id, function(memberships) {
                            assert.equal(memberships.length, 2);
                            var firstGroup = memberships[0];
                            var secondGroup = memberships[1];

                            // Update the lastModified of the second group so that it now has a library "rank"
                            Cassandra.runQuery('UPDATE Principals USING CONSISTENCY QUORUM SET ? = ? WHERE principalId = ?', ['lastModified', Date.now(), secondGroup.id], function(err) {
                                assert.ok(!err);

                                // The order should not change because the library does not get updated with the direct query
                                PrincipalsTestsUtil.getFullMembershipsLibrary(simon.restContext, branden.user.id, function(memberships) {
                                    assert.equal(memberships[0].id, firstGroup.id);
                                    assert.equal(memberships[1].id, secondGroup.id);

                                    // Purge the library so we can rebuild it
                                    LibraryAPI.Index.purge(PrincipalsConstants.library.MEMBERSHIPS_INDEX_NAME, branden.user.id, function(err) {
                                        assert.ok(!err);

                                        // Since secondGroup now has a lastModified, it should be ranked higher than the firstGroup
                                        PrincipalsTestsUtil.getFullMembershipsLibrary(simon.restContext, branden.user.id, function(memberships) {
                                            assert.equal(memberships[0].id, secondGroup.id);
                                            assert.equal(memberships[1].id, firstGroup.id);
                                            return callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies listing memberships library for non-existing principal results in an error
         */
        it('verify memberships library feed validation', function(callback) {
            // Verify invalid id
            RestAPI.Group.getMembershipsLibrary(camAdminRestContext, 'not-a-valid-id', null, null, function(err, response) {
                assert.ok(err);
                assert.equal(err.code, 400);

                RestAPI.Group.getMembershipsLibrary(camAdminRestContext, 'c:cam:not-a-principal-id', null, null, function(err, response) {
                    assert.ok(err);
                    assert.equal(err.code, 400);

                    RestAPI.Group.getMembershipsLibrary(camAdminRestContext, 'g:cam:non-existing-group', null, null, function(err, response) {
                        assert.ok(err);
                        assert.equal(err.code, 404);
                        return callback();
                    });
                });
            });
        });
    });

    describe('Feed Visibility', function() {

        /**
         * Test that verifies that all users get the proper library visibility bucket when listing the memberships library
         */
        it('verify memberships library feed visibility', function(callback) {
            TestsUtil.setupMultiTenantPrivacyEntities(function(publicTenant1, publicTenant2, privateTenant1, privateTenant2) {

                // Add the publicTenant1 public user to all the groups in their own tenant, publicTenant2 and the private tenant
                PrincipalsTestsUtil.addUserToAllGroups(publicTenant1.publicUser, publicTenant1, publicTenant2, privateTenant1, function() {

                    var expectedPrivateFeed = [
                        publicTenant1.publicGroup.id,
                        publicTenant1.loggedinGroup.id,
                        publicTenant1.privateGroup.id,
                        publicTenant2.publicGroup.id,
                        publicTenant2.loggedinGroup.id,
                        publicTenant2.privateGroup.id,
                        privateTenant1.publicGroup.id,
                        privateTenant1.loggedinGroup.id,
                        privateTenant1.privateGroup.id
                    ];

                    var expectedLoggedinFeed = [
                        publicTenant1.publicGroup.id,
                        publicTenant1.loggedinGroup.id,
                        publicTenant2.publicGroup.id,
                        privateTenant1.publicGroup.id
                    ];

                    var expectedPublicFeed = [
                        publicTenant1.publicGroup.id,
                        publicTenant2.publicGroup.id,
                        privateTenant1.publicGroup.id
                    ];

                    // Ensure the public user can see all their groups in the library feed
                    PrincipalsTestsUtil.getFullMembershipsLibrary(publicTenant1.publicUser.restContext, publicTenant1.publicUser.user.id, function(memberships) {
                        _assertArraysEqual(expectedPrivateFeed, _.pluck(memberships, 'id'));

                        // Ensure tenant admin can see all groups in the memberships library feed
                        PrincipalsTestsUtil.getFullMembershipsLibrary(publicTenant1.adminRestContext, publicTenant1.publicUser.user.id, function(memberships) {
                            _assertArraysEqual(expectedPrivateFeed, _.pluck(memberships, 'id'));                        

                            // Ensure the global admin can see all groups in the memberships library feed
                            PrincipalsTestsUtil.getFullMembershipsLibrary(globalAdminOnTenantRestContext, publicTenant1.publicUser.user.id, function(memberships) {
                                _assertArraysEqual(expectedPrivateFeed, _.pluck(memberships, 'id'));                        

                                // Ensure a user from the same tenant can see loggedin feed
                                PrincipalsTestsUtil.getFullMembershipsLibrary(publicTenant1.loggedinUser.restContext, publicTenant1.publicUser.user.id, function(memberships) {
                                    _assertArraysEqual(expectedLoggedinFeed, _.pluck(memberships, 'id'));

                                    // Ensure anonymous user gets the public feed
                                    PrincipalsTestsUtil.getFullMembershipsLibrary(publicTenant1.anonymousRestContext, publicTenant1.publicUser.user.id, function(memberships) {
                                        _assertArraysEqual(expectedPublicFeed, _.pluck(memberships, 'id'));

                                        // Ensure user from another tenant gets the public feed
                                        PrincipalsTestsUtil.getFullMembershipsLibrary(publicTenant2.publicUser.restContext, publicTenant1.publicUser.user.id, function(memberships) {
                                            _assertArraysEqual(expectedPublicFeed, _.pluck(memberships, 'id'));

                                            // Ensure tenant admin from another tenant gets the public feed
                                            PrincipalsTestsUtil.getFullMembershipsLibrary(publicTenant2.adminRestContext, publicTenant1.publicUser.user.id, function(memberships) {
                                                _assertArraysEqual(expectedPublicFeed, _.pluck(memberships, 'id'));                                            
                                                return callback();
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies only authorized users can see a user's memberships library
         */
        it('verify memberships library feed authorization', function(callback) {
            TestsUtil.setupMultiTenantPrivacyEntities(function(publicTenant1, publicTenant2, privateTenant1, privateTenant2) {

                // 1. Public user library

                // Ensure anonymous can see it
                RestAPI.Group.getMembershipsLibrary(publicTenant1.anonymousRestContext, publicTenant1.publicUser.user.id, null, null, function(err, response) {
                    assert.ok(!err);

                    // Ensure user from another tenant can see it
                    RestAPI.Group.getMembershipsLibrary(publicTenant2.publicUser.restContext, publicTenant1.publicUser.user.id, null, null, function(err, response) {
                        assert.ok(!err);

                        // Ensure user from same tenant can see it
                        RestAPI.Group.getMembershipsLibrary(publicTenant1.privateUser.restContext, publicTenant1.publicUser.user.id, null, null, function(err, response) {
                            assert.ok(!err);

                            // Ensure user themself can see it
                            RestAPI.Group.getMembershipsLibrary(publicTenant1.publicUser.restContext, publicTenant1.publicUser.user.id, null, null, function(err, response) {
                                assert.ok(!err);

                                // Ensure tenant admin can see it
                                RestAPI.Group.getMembershipsLibrary(publicTenant1.adminRestContext, publicTenant1.publicUser.user.id, null, null, function(err, response) {
                                    assert.ok(!err);

                                    // Ensure global admin can see it
                                    RestAPI.Group.getMembershipsLibrary(globalAdminOnTenantRestContext, publicTenant1.publicUser.user.id, null, null, function(err, response) {
                                        assert.ok(!err);


                                        // 2. Logged in user library

                                        // Ensure anonymous cannot see it
                                        RestAPI.Group.getMembershipsLibrary(publicTenant1.anonymousRestContext, publicTenant1.loggedinUser.user.id, null, null, function(err, response) {
                                            assert.ok(err);
                                            assert.equal(err.code, 401);

                                            // Ensure user from another tenant cannot see it
                                            RestAPI.Group.getMembershipsLibrary(publicTenant2.publicUser.restContext, publicTenant1.loggedinUser.user.id, null, null, function(err, response) {
                                                assert.ok(err);
                                                assert.equal(err.code, 401);

                                                // Ensure user from same tenant can see it
                                                RestAPI.Group.getMembershipsLibrary(publicTenant1.publicUser.restContext, publicTenant1.loggedinUser.user.id, null, null, function(err, response) {
                                                    assert.ok(!err);

                                                    // Ensure user themself can see it
                                                    RestAPI.Group.getMembershipsLibrary(publicTenant1.loggedinUser.restContext, publicTenant1.loggedinUser.user.id, null, null, function(err, response) {
                                                        assert.ok(!err);

                                                        // Ensure tenant admin can see it
                                                        RestAPI.Group.getMembershipsLibrary(publicTenant1.adminRestContext, publicTenant1.loggedinUser.user.id, null, null, function(err, response) {
                                                            assert.ok(!err);

                                                            // Ensure global admin can see it
                                                            RestAPI.Group.getMembershipsLibrary(globalAdminOnTenantRestContext, publicTenant1.loggedinUser.user.id, null, null, function(err, response) {
                                                                assert.ok(!err);


                                                                // 3. Private user library

                                                                // Ensure anonymous cannot see it
                                                                RestAPI.Group.getMembershipsLibrary(publicTenant1.anonymousRestContext, publicTenant1.privateUser.user.id, null, null, function(err, response) {
                                                                    assert.ok(err);
                                                                    assert.equal(err.code, 401);

                                                                    // Ensure user from another tenant cannot see it
                                                                    RestAPI.Group.getMembershipsLibrary(publicTenant2.publicUser.restContext, publicTenant1.privateUser.user.id, null, null, function(err, response) {
                                                                        assert.ok(err);
                                                                        assert.equal(err.code, 401);

                                                                        // Ensure user from same tenant can see it
                                                                        RestAPI.Group.getMembershipsLibrary(publicTenant1.publicUser.restContext, publicTenant1.privateUser.user.id, null, null, function(err, response) {
                                                                            assert.ok(err);
                                                                            assert.equal(err.code, 401);

                                                                            // Ensure user themself can see it
                                                                            RestAPI.Group.getMembershipsLibrary(publicTenant1.privateUser.restContext, publicTenant1.privateUser.user.id, null, null, function(err, response) {
                                                                                assert.ok(!err);

                                                                                // Ensure tenant admin can see it
                                                                                RestAPI.Group.getMembershipsLibrary(publicTenant1.adminRestContext, publicTenant1.privateUser.user.id, null, null, function(err, response) {
                                                                                    assert.ok(!err);

                                                                                    // Ensure global admin can see it
                                                                                    RestAPI.Group.getMembershipsLibrary(globalAdminOnTenantRestContext, publicTenant1.privateUser.user.id, null, null, function(err, response) {
                                                                                        assert.ok(!err);
                                                                                        return callback();
                                                                                    });
                                                                                });
                                                                            });
                                                                        });
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('Search Visibility', function() {

        /**
         * Test that verifies that all users get the proper library visibility when searching the memberships library
         */
        it('verify memberships library search visibility', function(callback) {
            TestsUtil.setupMultiTenantPrivacyEntities(function(publicTenant1, publicTenant2, privateTenant1, privateTenant2) {

                // Add the publicTenant1 public user to all the groups in their own tenant, publicTenant2 and the private tenant
                PrincipalsTestsUtil.addUserToAllGroups(publicTenant1.publicUser, publicTenant1, publicTenant2, privateTenant1, function() {

                    var expectedPrivateSearch = [
                        publicTenant1.publicGroup.id,
                        publicTenant1.loggedinGroup.id,
                        publicTenant1.privateGroup.id,
                        publicTenant2.publicGroup.id,
                        publicTenant2.loggedinGroup.id,
                        publicTenant2.privateGroup.id,
                        privateTenant1.publicGroup.id,
                        privateTenant1.loggedinGroup.id,
                        privateTenant1.privateGroup.id
                    ];

                    var expectedLoggedinSearch = [
                        publicTenant1.publicGroup.id,
                        publicTenant1.loggedinGroup.id,
                        publicTenant2.publicGroup.id,
                        privateTenant1.publicGroup.id
                    ];

                    var expectedPublicSearch = [
                        publicTenant1.publicGroup.id,
                        publicTenant2.publicGroup.id,
                        privateTenant1.publicGroup.id
                    ];

                    //restCtx, searchType, params, opts, callback

                    // Ensure the public user can see all their groups in the library feed
                    SearchTestsUtil.searchAll(publicTenant1.publicUser.restContext, 'memberships-library', [publicTenant1.publicUser.user.id], null, function(err, response) {
                        _assertArraysEqual(expectedPrivateSearch, _.pluck(response.results, 'id'));

                        // Ensure tenant admin can see all groups in the memberships library feed
                        SearchTestsUtil.searchAll(publicTenant1.adminRestContext, 'memberships-library', [publicTenant1.publicUser.user.id], null, function(err, response) {
                            _assertArraysEqual(expectedPrivateSearch, _.pluck(response.results, 'id'));                        

                            // Ensure the global admin can see all groups in the memberships library feed
                            SearchTestsUtil.searchAll(globalAdminOnTenantRestContext, 'memberships-library', [publicTenant1.publicUser.user.id], null, function(err, response) {
                                _assertArraysEqual(expectedPrivateSearch, _.pluck(response.results, 'id'));                        

                                // Ensure a user from the same tenant can see loggedin feed
                                SearchTestsUtil.searchAll(publicTenant1.loggedinUser.restContext, 'memberships-library', [publicTenant1.publicUser.user.id], null, function(err, response) {
                                    _assertArraysEqual(expectedLoggedinSearch, _.pluck(response.results, 'id'));

                                    // Ensure anonymous user gets the public feed
                                    SearchTestsUtil.searchAll(publicTenant1.anonymousRestContext, 'memberships-library', [publicTenant1.publicUser.user.id], null, function(err, response) {
                                        _assertArraysEqual(expectedPublicSearch, _.pluck(response.results, 'id'));

                                        // Ensure user from another tenant gets the public feed
                                        SearchTestsUtil.searchAll(publicTenant2.publicUser.restContext, 'memberships-library', [publicTenant1.publicUser.user.id], null, function(err, response) {
                                            _assertArraysEqual(expectedPublicSearch, _.pluck(response.results, 'id'));

                                            // Ensure tenant admin from another tenant gets the public feed
                                            SearchTestsUtil.searchAll(publicTenant2.adminRestContext, 'memberships-library', [publicTenant1.publicUser.user.id], null, function(err, response) {
                                                _assertArraysEqual(expectedPublicSearch, _.pluck(response.results, 'id'));                                            
                                                return callback();
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies only authorized users can see a user's memberships library
         */
        it('verify memberships library search authorization', function(callback) {
            TestsUtil.setupMultiTenantPrivacyEntities(function(publicTenant1, publicTenant2, privateTenant1, privateTenant2) {

                // 1. Public user library

                // Ensure anonymous can see it
                SearchTestsUtil.searchAll(publicTenant1.anonymousRestContext, 'memberships-library', [publicTenant1.publicUser.user.id], null, function(err, response) {
                    assert.ok(!err);

                    // Ensure user from another tenant can see it
                    SearchTestsUtil.searchAll(publicTenant2.publicUser.restContext, 'memberships-library', [publicTenant1.publicUser.user.id], null, function(err, response) {
                        assert.ok(!err);

                        // Ensure user from same tenant can see it
                        SearchTestsUtil.searchAll(publicTenant1.privateUser.restContext, 'memberships-library', [publicTenant1.publicUser.user.id], null, function(err, response) {
                            assert.ok(!err);

                            // Ensure user themself can see it
                            SearchTestsUtil.searchAll(publicTenant1.publicUser.restContext, 'memberships-library', [publicTenant1.publicUser.user.id], null, function(err, response) {
                                assert.ok(!err);

                                // Ensure tenant admin can see it
                                SearchTestsUtil.searchAll(publicTenant1.adminRestContext, 'memberships-library', [publicTenant1.publicUser.user.id], null, function(err, response) {
                                    assert.ok(!err);

                                    // Ensure global admin can see it
                                    SearchTestsUtil.searchAll(globalAdminOnTenantRestContext, 'memberships-library', [publicTenant1.publicUser.user.id], null, function(err, response) {
                                        assert.ok(!err);


                                        // 2. Logged in user library

                                        // Ensure anonymous cannot see it
                                        SearchTestsUtil.searchAll(publicTenant1.anonymousRestContext, 'memberships-library', [publicTenant1.loggedinUser.user.id], null, function(err, response) {
                                            assert.ok(err);
                                            assert.equal(err.code, 401);

                                            // Ensure user from another tenant cannot see it
                                            SearchTestsUtil.searchAll(publicTenant2.publicUser.restContext, 'memberships-library', [publicTenant1.loggedinUser.user.id], null, function(err, response) {
                                                assert.ok(err);
                                                assert.equal(err.code, 401);

                                                // Ensure user from same tenant can see it
                                                SearchTestsUtil.searchAll(publicTenant1.publicUser.restContext, 'memberships-library', [publicTenant1.loggedinUser.user.id], null, function(err, response) {
                                                    assert.ok(!err);

                                                    // Ensure user themself can see it
                                                    SearchTestsUtil.searchAll(publicTenant1.loggedinUser.restContext, 'memberships-library', [publicTenant1.loggedinUser.user.id], null, function(err, response) {
                                                        assert.ok(!err);

                                                        // Ensure tenant admin can see it
                                                        SearchTestsUtil.searchAll(publicTenant1.adminRestContext, 'memberships-library', [publicTenant1.loggedinUser.user.id], null, function(err, response) {
                                                            assert.ok(!err);

                                                            // Ensure global admin can see it
                                                            SearchTestsUtil.searchAll(globalAdminOnTenantRestContext, 'memberships-library', [publicTenant1.loggedinUser.user.id], null, function(err, response) {
                                                                assert.ok(!err);


                                                                // 3. Private user library

                                                                // Ensure anonymous cannot see it
                                                                SearchTestsUtil.searchAll(publicTenant1.anonymousRestContext, 'memberships-library', [publicTenant1.privateUser.user.id], null, function(err, response) {
                                                                    assert.ok(err);
                                                                    assert.equal(err.code, 401);

                                                                    // Ensure user from another tenant cannot see it
                                                                    SearchTestsUtil.searchAll(publicTenant2.publicUser.restContext, 'memberships-library', [publicTenant1.privateUser.user.id], null, function(err, response) {
                                                                        assert.ok(err);
                                                                        assert.equal(err.code, 401);

                                                                        // Ensure user from same tenant can see it
                                                                        SearchTestsUtil.searchAll(publicTenant1.publicUser.restContext, 'memberships-library', [publicTenant1.privateUser.user.id], null, function(err, response) {
                                                                            assert.ok(err);
                                                                            assert.equal(err.code, 401);

                                                                            // Ensure user themself can see it
                                                                            SearchTestsUtil.searchAll(publicTenant1.privateUser.restContext, 'memberships-library', [publicTenant1.privateUser.user.id], null, function(err, response) {
                                                                                assert.ok(!err);

                                                                                // Ensure tenant admin can see it
                                                                                SearchTestsUtil.searchAll(publicTenant1.adminRestContext, 'memberships-library', [publicTenant1.privateUser.user.id], null, function(err, response) {
                                                                                    assert.ok(!err);

                                                                                    // Ensure global admin can see it
                                                                                    SearchTestsUtil.searchAll(globalAdminOnTenantRestContext, 'memberships-library', [publicTenant1.privateUser.user.id], null, function(err, response) {
                                                                                        assert.ok(!err);
                                                                                        return callback();
                                                                                    });
                                                                                });
                                                                            });
                                                                        });
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
});
