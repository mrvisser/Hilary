/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var Time = require('time');

var log = require('oae-logger').logger('oae-principals');
var Cassandra = require('oae-util/lib/cassandra');
var SearchAPI = require('oae-search');
var SearchUtil = require('oae-search/lib/util');
var Tenant = require('oae-tenants/lib/model').Tenant;
var Context = require('oae-context').Context;
var PrincipalsAPI = require('oae-principals');
var User = require('oae-principals/lib/model').User;

module.exports = function(app, callback) {
    ensureSchema(function(err) {
        if (err) {
            return callback(err);
        }

        ensureSearchTypes(function(err) {
            if (err) {
                return callback(err);
            }

            ensureGlobalAdmin(callback);
        });
    });
};

/**
 * Ensure that the all of the principal-related schemas are created. If they already exist, this method will not
 * do anything
 * @param  {Function}    callback       A function(err), specifying whether or not there was an error creating the schema.
 * @param  {Object}      callback.err   Error object, containing the error message
 */
var ensureSchema = function(callback) {
    // Both user and group information will be stored inside of the Principals CF
    Cassandra.createColumnFamilies({
        'Principals': "CREATE COLUMNFAMILY Principals (principalId text PRIMARY KEY, alias text, tenant text, visibility text) WITH comment='Principal information';"
    }, callback);
};

/**
 * Ensure that the global administrative user exists, create them if they do not.
 *
 * @param {Function}    callback        Invoked when the process completes
 * @param {Object}      callback.err    An error that occurred, if any
 */
var ensureGlobalAdmin = function(callback) {
    // We'll create/get 1 global admin account in the internal global tenant that can be used
    // to create tenants/other global accounts.
    var globalTenant = new Tenant('global', 'Global tenant', 2000, 'localhost');
    var globalUser = new User(globalTenant.alias, null, 'administrator', 'private', 'en_GB', 'Europe/London', 'Admin', 'User', 'The global admin User', true, false);
    var globalContext = new Context(globalTenant, globalUser);

    // Create a global admin if it doesn't exist.
    PrincipalsAPI.createUser(globalContext, globalUser.username, 'administrator', globalUser.visibility, globalUser.locale, globalUser.timezone, globalUser.firstName, globalUser.lastName, globalUser.displayName, function(err, createdUser) {
        // If no error occurred, we're starting with a clean keyspace.
        // We'll set the newly created user as a global admin.
        if (!err) {
            globalUser.id = createdUser.id;
            PrincipalsAPI.setGlobalAdmin(globalContext, createdUser.id, true, function(err) {
                if (err) {
                    return callback(err);
                }

                log().info("Admin account with user id '%s' created.", createdUser.id);
                callback();
            });
        } else if (err && err.msg && err.msg.indexOf('already exists') > 0) {
            // The user already exists so this is a reboot of an existing dataset.
            callback();
        } else {
            // This is an actual error!
            callback(err);
        }
    });
}

/**
 * Ensure that the search types for principals exists. If they don't, they are created.
 *
 * @param {Function}    callback        Invoked when the process completes
 * @param {Object}      callback.err    An error that occurred, if any
 */
var ensureSearchTypes = function(callback) {

    // register the search document transformers for users and groups
    SearchAPI.registerDocumentTransformer('user', SearchUtil.createPropertyDocumentTransformer([ 'tenantId', 'name', 'visibility']));
    SearchAPI.registerDocumentTransformer('group', SearchUtil.createPropertyDocumentTransformer([ 'tenantId', 'name', 'description',
        'visibility']));

    var baseSchema = {
        'tenantId': { 'type': 'string', 'store': 'no', 'index': 'not_analyzed' },
        'name': { 'type': 'string', 'store': 'yes', 'index': 'no' },
        'visibility': { 'type': 'string', 'store': 'yes', 'index': 'not_analyzed' },
        'general': { 'type': 'string', 'store': 'no', 'index': 'analyzed' },
        'sort': { 'type': 'string', 'store': 'no', 'index': 'not_analyzed' },
        'access': { 'type': 'string', 'store': 'no', 'index': 'not_analyzed' }
    };

    // group has a description
    var groupSchema = _.extend(baseSchema, { 'description': { 'type': 'string', 'store': 'yes', 'index': 'no' }});

    // create both the group and user schema mappings
    SearchAPI.putMapping('group', groupSchema, function(err) {
        if (err) {
            return callback(err);
        }
        SearchAPI.putMapping('user', baseSchema, callback);
    });
}
