/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');

var ConfigTestsUtil = require('oae-config/lib/test/util');
var RestAPI = require('oae-rest');
var TestsUtil = require('oae-tests/lib/util');

var generateTestGroups = module.exports.generateTestGroups = function(restCtx, numToCreate, callback, _createdGroups) {
    _createdGroups = _createdGroups || [];
    if (numToCreate === 0) {
        return callback(_createdGroups);
    }

    RestAPI.Group.createGroup(restCtx, 'test-group-displayName', 'test-group-description', 'public', 'yes', null, null, function(err, group) {
        assert.ok(!err);
        _createdGroups.push(group);
        generateTestGroups(restCtx, numToCreate - 1, callback, _createdGroups);
    });
};

var getFullMembershipsLibrary = module.exports.getFullMembershipsLibrary = function(restCtx, libraryId, callback, _memberships, _nextToken) {
    _memberships = _memberships || [];
    RestAPI.Group.getMembershipsLibrary(restCtx, libraryId, _nextToken, 25, function(err, response) {
        assert.ok(!err);

        _.each(response.results, function(membership) {
            _memberships.push(membership);
        });

        if (response.nextToken) {
            return getFullMembershipsLibrary(restCtx, libraryId, callback, _memberships, response.nextToken);
        } else {
            return callback(_memberships);
        }
    });
};

/**
 * Add the provided member user to all the groups in the provided tenants.
 *
 * @param  {Object}         memberUser              An object containing the User and RestContext of the user to add as a member
 * @param  {RestContext}    memberUser.restContext  The rest context of the member user
 * @param  {User}           memberUser.user         The user object of the member user
 * @param  {Object}         publicTenant1           An object containing the public, loggedin and private group to which to add the user as a member
 * @param  {Object}         publicTenant2           An object containing the public, loggedin and private group to which to add the user as a member
 * @param  {Object}         privateTenant2          An object containing the public, loggedin and private group to which to add the user as a member
 */
var addUserToAllGroups = module.exports.addUserToAllGroups = function(memberUser, publicTenant1, publicTenant2, privateTenant, callback) {
    // Temporarily make the private tenant public
    ConfigTestsUtil.updateConfigAndWait(TestsUtil.createGlobalAdminRestContext(), privateTenant.tenant.alias, 'oae-tenants/tenantprivacy/tenantprivate', false, function(err) {
        assert.ok(!err);

        var permissions = {};
        permissions[memberUser.user.id] = 'member';

        // Add the user to all the first public tenant groups
        RestAPI.Group.setGroupMembers(publicTenant1.adminRestContext, publicTenant1.publicGroup.id, permissions, function(err) {
            assert.ok(!err);
            RestAPI.Group.setGroupMembers(publicTenant1.adminRestContext, publicTenant1.loggedinGroup.id, permissions, function(err) {
                assert.ok(!err);
                RestAPI.Group.setGroupMembers(publicTenant1.adminRestContext, publicTenant1.privateGroup.id, permissions, function(err) {
                    assert.ok(!err);

                    // Add the user to all the second public tenant groups
                    RestAPI.Group.setGroupMembers(publicTenant2.adminRestContext, publicTenant2.publicGroup.id, permissions, function(err) {
                        assert.ok(!err);
                        RestAPI.Group.setGroupMembers(publicTenant2.adminRestContext, publicTenant2.loggedinGroup.id, permissions, function(err) {
                            assert.ok(!err);
                            RestAPI.Group.setGroupMembers(publicTenant2.adminRestContext, publicTenant2.privateGroup.id, permissions, function(err) {
                                assert.ok(!err);

                                // Add the user to all the private tenant groups
                                RestAPI.Group.setGroupMembers(privateTenant.adminRestContext, privateTenant.publicGroup.id, permissions, function(err) {
                                    assert.ok(!err);
                                    RestAPI.Group.setGroupMembers(privateTenant.adminRestContext, privateTenant.loggedinGroup.id, permissions, function(err) {
                                        assert.ok(!err);
                                        RestAPI.Group.setGroupMembers(privateTenant.adminRestContext, privateTenant.privateGroup.id, permissions, function(err) {
                                            assert.ok(!err);

                                            // Make the private tenant private again
                                            ConfigTestsUtil.updateConfigAndWait(TestsUtil.createGlobalAdminRestContext(), privateTenant.tenant.alias, 'oae-tenants/tenantprivacy/tenantprivate', true, function(err) {
                                                assert.ok(!err);
                                                return callback();
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
};
