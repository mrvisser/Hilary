/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var sanitize = require('validator').sanitize;
var shortid = require('shortid');

var ActivityConstants = require('oae-activity/lib/constants').ActivityConstants;
var ActivityModel = require('oae-activity/lib/model');
var AuthzAPI = require('oae-authz');
var AuthzConstants = require('oae-authz/lib/constants').AuthzConstants;
var AuthzUtil = require('oae-authz/lib/util');
var Config = require('oae-config').config('oae-principals');
var ContentUtil = require('oae-content/lib/internal/util');
var Signature = require('oae-util/lib/signature');
var TenantsUtil = require('oae-tenants/lib/util');
var TZ = require('oae-util/lib/tz');

var Group = require('./model').Group;
var PrincipalsConstants = require('oae-principals/lib/constants').PrincipalsConstants;
var PrincipalsDAO = require('./internal/dao');
var PrincipalsEmitter = require('oae-principals/lib/internal/emitter');
var User = require('./model').User;

/**
 * Get a principal (user or group)
 *
 * @param  {Context}    ctx                 Standard context object containing the current user and the current tenant
 * @param  {String}     principalId         The ID of the principal that should be retrieved.
 * @param  {Function}   callback            Standard callback function
 * @param  {Object}     callback.err        An error that occurred, if any
 * @param  {Group|User} callback.principal  The asked for principal.
 */
var getPrincipal = module.exports.getPrincipal = function(ctx, principalId, callback) {
    getPrincipals(ctx, [principalId], function(err, principals) {
        if (err) {
            return callback(err);
        } else if (!principals[principalId]) {
            return callback({'code': 404, 'msg': 'Could not find principal with id ' + principalId});
        }

        return callback(null, principals[principalId]);
    });
};

/**
 * Get a set of principals (user or groups). This method *will* return an error if some of the principals
 * don't exist
 *
 * @param  {Context}        ctx                                 Standard context object containing the current user and the current tenant
 * @param  {String[]}       principalIds                        The ID of the principal that should be retrieved
 * @param  {Object}         callback.err                        An error that occurred, if any
 * @param  {Object}         callback.err.existingPrincipals     Object representing the principals that existed in storage. The keys will be the principal ids and the values will be the user-friendly principal basic profiles
 * @param  {String[]}       callback.err.missingPrincipalIds    The ids of the principals that did not exist
 * @param  {Object}         callback.principals                 Object representing the retrieved principals. The keys will be the principal ids and the values will be the principal basic profiles
 */
var getPrincipals = module.exports.getPrincipals = function(ctx, principalIds, callback) {
    PrincipalsDAO.getPrincipals(principalIds, null, function(err, principals) {
        if (err) {
            return callback(err);
        }

        // Sign the picture URLs for the principals
        _generatePictureURLs(ctx, principals, null, null, function(err) {
            if (err) {
                return callback(err);
            }

            // Hide the user profile depending on implicit access
            _.chain(principals)
                .filter(function(principal) {
                    return isUser(principal.id);
                })
                .each(function(user) {
                    hideUserData(ctx, user);
                })
                .value();

            return callback(null, principals);
        });
    });
};

/**
 * Touch the last modified date of the given principal
 *
 * @param  {Principal}  oldPrincipal                The principal whose last modified date to touch
 * @param  {Function}   callback                    Standard callback function
 * @param  {Object}     callback.err                An error that occurred, if any
 * @param  {Principal}  callback.updatedPrincipal   The updated version of the principal with its last modifed date updated
 */
var touchLastModified = module.exports.touchLastModified = function(oldPrincipal, callback) {
    var oldLastModified = oldPrincipal.lastModified;
    var newLastModified = Date.now().toString();
    var updatedProfileFields = {'lastModified': newLastModified};
    PrincipalsDAO.updatePrincipal(oldPrincipal.id, updatedProfileFields, function(err) {
        if (err) {
            return callback(err);
        }

        var updatedPrincipal = _.extend({}, oldPrincipal, updatedProfileFields);
        return callback(null, updatedPrincipal);
    });
};

/**
 * Set the verified email address of the specified user, clearing any invitations that they have
 * pending
 *
 * @param  {Context}    ctx             Standard context object containing the current user and the current tenant
 * @param  {String}     userId          The id of the user to verify the email address for
 * @param  {String}     email           The email address to place as the verified email
 * @param  {Function}   callback        Standard callback function
 * @param  {Object}     callback.err    An error that occurred, if any
 * @param  {User}       callback.user   The updated user
 */
var verifyEmailAddress = module.exports.verifyEmailAddress = function(ctx, user, email, callback) {
    PrincipalsDAO.setEmailAddress(user, email, function(err, updatedUser) {
        if (err) {
            return callback(err);
        }

        PrincipalsEmitter.emit(PrincipalsConstants.events.VERIFIED_EMAIL, ctx, updatedUser, function(errs) {
            if (errs) {
                return callback(_.first(errs));
            }

            return callback(null, updatedUser);
        });
    });
};

/**
 * Create a unique id for a group
 *
 * @param  {String}     tenantAlias     The alias of the tenant for which to generate the group id
 * @return {String}                     The id for the group
 */
var createGroupId = module.exports.createGroupId = function(tenantAlias) {
    return AuthzUtil.toId(AuthzConstants.principalTypes.GROUP, tenantAlias, shortid.generate());
};

/**
 * Determine whether or not the given string represents a group id.
 *
 * @param  {String}  groupId    A string that may or may not be a group id
 * @return {Boolean}            Whether or not the provided identifier is a group identifier.
 */
var isGroup = module.exports.isGroup = function(groupId) {
    return PrincipalsDAO.isGroup(groupId);
};

/**
 * Determine whether or not the given string represents a user id.
 *
 * @param  {String}  userId     A string that may or may not be a user id
 * @return {Boolean}            Whether or not the provided identifier is a user identifier.
 */
var isUser = module.exports.isUser = function(userId) {
    return PrincipalsDAO.isUser(userId);
};

/**
 * Hide sensitive user information that the (possibly anonymous) user in context does not have access to see.
 *
 * If the current user has no access to the user, then the following will be scrubbed:
 *
 *  1. The displayName will be replaced by the publicAlias
 *  2. The following fields will be deleted
 *      ** publicAlias
 *      ** locale
 *      ** smallPicture
 *      ** smallPictureUri
 *      ** mediumPicture
 *      ** mediumPictureUri
 *      ** largePicture
 *      ** largePictureUri
 *
 * If the user has access but is not the user themself, the publicAlias is scrubbed from the user.
 *
 * @param  {Context}     ctx     Standard context object containing the current user and the current tenant
 * @param  {User}        user    The user object to hide as necessary
 * @api private
 */
var hideUserData = module.exports.hideUserData = function(ctx, user) {
    var isAnon = !(ctx.user());
    var isLoggedIn = TenantsUtil.isLoggedIn(ctx, user.tenant.alias);
    var isTargetUser = (!isAnon && ctx.user().id === user.id);
    var isAdmin = (!isAnon && ctx.user().isAdmin && ctx.user().isAdmin(user.tenant.alias));

    if (isAdmin || isTargetUser) {
        return user;
    }

    // Hide the sensitive profile information if the user has limited access
    if ((user.visibility === AuthzConstants.visibility.LOGGEDIN && !isLoggedIn) ||
        (user.visibility === AuthzConstants.visibility.PRIVATE && !isTargetUser)) {

        user.displayName = user.publicAlias;
        user.picture = {};

        // The profile path should be removed from the user object as well. This will tell the UI
        // when to offer a link to the profile page and when not to
        delete user.profilePath;
    }

    // Always delete these guys if it is not the target user or admin
    delete user.acceptedTC;
    delete user.email;
    delete user.emailPreference;
    delete user.locale;
    delete user.notificationsUnread;
    delete user.notificationsLastRead;
    delete user.publicAlias;
};

/**
 * Given a user object, apply the given set of basic profile updates and return the updated user.
 *
 * @param  {User}      user         The user object on which to apply the updates
 * @param  {Object}    fieldUpdates An object of fieldKey -> value of the field updates to apply to the user object
 * @return {User}                   The updated user with all field updates applied
 */
var createUpdatedUser = module.exports.createUpdatedUser = function(user, fieldUpdates) {
    var newDisplayName = fieldUpdates.displayName || user.displayName;
    var newEmail = fieldUpdates.email || user.email;
    var newUser = new User(user.tenant.alias, user.id, newDisplayName, newEmail, {
        'visibility': fieldUpdates.visibility || user.visibility,
        'emailPreference': fieldUpdates.emailPreference || user.emailPreference,
        'locale': fieldUpdates.locale || user.locale,
        'publicAlias': fieldUpdates.publicAlias || user.publicAlias,
        'notificationsUnread': fieldUpdates.notificationsUnread || user.notificationsUnread,
        'notificationsLastRead': fieldUpdates.notificationsLastRead || user.notificationsLastRead,
        'acceptedTC': fieldUpdates.acceptedTC || user.acceptedTC,
        'isGlobalAdmin': user.isGlobalAdmin(),
        'isTenantAdmin': user.isTenantAdmin(user.tenant.alias)
    });

    return newUser;
};

//////////////////////////////
// ACTIVITY UTILITY METHODS //
//////////////////////////////

/**
 * Create the persistent user entity that can be transformed into an activity entity for the UI.
 *
 * @param  {String}    userId      The ID of the user
 * @param  {User}      [user]      The user that supplies the data for the entity
 * @return {Object}                An object containing the entity data that can be transformed into a UI user activity entity
 */
var createPersistentUserActivityEntity = module.exports.createPersistentUserActivityEntity = function(userId, user) {
    return new ActivityModel.ActivityEntity('user', userId, user.visibility, {'user': user});
};

/**
 * Transform persisted user activity entities that can be used in an activity
 * stream. The returned activity entity will be output in a model compliant with
 * activitystrea.ms
 *
 * For more details on the transformed entity model, @see ActivityAPI#registerActivityEntityType
 *
 * @param  {Context}            ctx                     Standard context object containing the current user and the current tenant
 * @param  {Object[]}           userInfos               An object representing the user entities to transform
 * @param  {String}             userInfos[i].userId     The id of the user entity
 * @param  {User}               [userInfos[i].user]     The user object. If not specified, the generated entity with be abbreviated with just the information available
 * @param  {Function}           callback                Standard callback function
 * @param  {Object}             callback.err            An error that occurred, if any
 * @param  {ActivityEntity[]}   callback.entities       The activity entities that represent the given user data
 */
var transformPersistentUserActivityEntities = module.exports.transformPersistentUserActivityEntities = function(ctx, userInfos, callback, _userInfos, _entities) {
    _userInfos = _userInfos || userInfos.slice();
    _entities = _entities || [];
    if (_.isEmpty(_userInfos)) {
        return callback(null, _entities);
    }

    var userInfo = _userInfos.shift();
    _transformPersistentUserActivityEntity(ctx, userInfo.userId, userInfo.user, function(err, entity) {
        if (err) {
            return callback(err);
        }

        _entities.push(entity);
        return transformPersistentUserActivityEntities(ctx, userInfos, callback, _userInfos, _entities);
    });
};

/**
 * Transform a persisted user activity entity that can be used in an activity stream The returned activity entity will be
 * output in the `activitystrea.ms`-compliant data model
 *
 * For more details on the transformed entity model, @see ActivityAPI#registerActivityEntityType
 *
 * @param  {Context}        ctx                 Standard context object containing the current user and the current tenant
 * @param  {String}         userId              The id of the user
 * @param  {User}           user                The user object
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error that occurred, if any
 * @param  {ActivityEntity} callback.entity     The activity entity that represents the given user data
 * @api private
 */
var _transformPersistentUserActivityEntity = function(ctx, userId, user, callback) {
    var tenant = ctx.tenant();
    var baseUrl = TenantsUtil.getBaseUrl(tenant);
    var globalId = baseUrl + '/api/user/' + userId;

    hideUserData(ctx, user);

    var opts = {'ext': {}};
    opts.ext[ActivityConstants.properties.OAE_ID] = userId;

    // Signed user profile picture URLs will last forever
    _generatePictureURLs(ctx, user, -1, null, function(err) {
        if (err) {
            return callback(err);
        }

        opts.displayName = user.displayName;
        if (user.profilePath) {
            opts.url = baseUrl + user.profilePath;

            if (user.picture.small) {
                opts.ext[ActivityConstants.properties.OAE_THUMBNAIL] = new ActivityModel.ActivityMediaLink(user.picture.small, PrincipalsConstants.picture.size.SMALL , PrincipalsConstants.picture.size.SMALL);
            }

            if (user.picture.medium) {
                opts.image = new ActivityModel.ActivityMediaLink(user.picture.medium, PrincipalsConstants.picture.size.MEDIUM , PrincipalsConstants.picture.size.MEDIUM);
            }
        }

        opts.ext[ActivityConstants.properties.OAE_VISIBILITY] = user.visibility;
        opts.ext[ActivityConstants.properties.OAE_PROFILEPATH] = user.profilePath;

        return callback(null, new ActivityModel.ActivityEntity('user', globalId, user.visibility, opts));
    });
};

/**
 * Transform a persisted user activity entity that can be used in an activity stream. The user property will be taken from
 * the persisted entity, scrubbed and returned as the "transformed entity"
 *
 * @param  {Context}    ctx             Standard context object containing the current user and the current tenant
 * @param  {String}     userId          The id of the user
 * @param  {User}       [user]          The user object. If not specified, the generated entity with be abbreviated with just the information available
 * @param  {Function}   callback        Standard callback function
 * @param  {Object}     callback.err    An error that occurred, if any
 * @param  {User}       callback.user   The scrubbed user object
 * @api private
 */
var transformPersistentUserActivityEntityToInternal = module.exports.transformPersistentUserActivityEntityToInternal = function(ctx, userId, user, callback) {
    if (!user) {
        return setImmediate(callback, null, {'id': userId});
    }

    hideUserData(ctx, user);
    _generatePictureURLs(ctx, user, -1, null, function(err) {
        if (err) {
            return callback(err);
        }

        return callback(null, user);
    });
};

/**
 * Create the persistent group entity that can be transformed into an activity entity for the UI
 *
 * @param  {String}    groupId     The ID of the group
 * @param  {Group}     [group]     The group that supplies the data for the entity. If not specified, only the minimal data will be returned for transformation.
 * @return {Object}                An object containing the entity data that can be transformed into a UI group activity entity
 */
var createPersistentGroupActivityEntity = module.exports.createPersistentGroupActivityEntity = function(groupId, group) {
    return new ActivityModel.ActivityEntity('group', groupId, group.visibility, {'group': group});
};

/**
 * Transform persistent group activity entities that can be used in an activity stream
 *
 * For more details on the transformed entity model, @see ActivityAPI#registerActivityEntityType
 *
 * @param  {Context}            ctx                     Standard context object containing the current user and the current tenant
 * @param  {Object}             groupInfos              The group information to transform
 * @param  {String}             groupInfos[i].groupId   The id of the group
 * @param  {Group}              [groupInfos[i].group]   The group object. If not specified, the generated entity with be abbreviated with just the information available
 * @param  {Function}           callback                Standard callback function
 * @param  {Object}             callback.err            An error that occurred, if any
 * @param  {ActivityEntity[]}   callback.entities       The activity entities that represents the given group data
 */
var transformPersistentGroupActivityEntities = module.exports.transformPersistentGroupActivityEntities = function(ctx, groupInfos, callback, _groupInfos, _entities) {
    _groupInfos = _groupInfos || groupInfos.slice();
    _entities = _entities || [];
    if (_.isEmpty(_groupInfos)) {
        return callback(null, _entities);
    }

    var groupInfo = _groupInfos.shift();
    _transformPersistentGroupActivityEntity(ctx, groupInfo.groupId, groupInfo.group, function(err, entity) {
        if (err) {
            return callback(err);
        }

        _entities.push(entity);
        return transformPersistentGroupActivityEntities(ctx, groupInfos, callback, _groupInfos, _entities);
    });
};

/**
 * Transform a persisted group activity entity that can be used in an activity stream
 *
 * For more details on the transformed entity model, @see ActivityAPI#registerActivityEntityType
 *
 * @param  {Context}            ctx                 Standard context object containing the current user and the current tenant
 * @param  {String}             groupId             The id of the group
 * @param  {Group}              [group]             The group object. If not specified, the generated entity with be abbreviated with just the information available
 * @param  {Function}           callback            Standard callback function
 * @param  {Object}             callback.err        An error that occurred, if any
 * @param  {ActivityEntity}     callback.entity     The activity entity that represents the given group data
 * @api private
 */
var _transformPersistentGroupActivityEntity = function(ctx, groupId, group, callback) {
    var tenant = ctx.tenant();
    var baseUrl = TenantsUtil.getBaseUrl(tenant);

    // Note that the globalId is used as a canonical reference and should not depend on whether or not
    // the tenant is using http or https
    var globalId = 'http://' + tenant.host + '/api/group/' + groupId;

    var opts = {'ext': {}};
    opts.ext[ActivityConstants.properties.OAE_ID] = groupId;
    if (!group) {
        return callback(null, new ActivityModel.ActivityEntity('group', globalId, group.visibility, opts));
    }

    // Signed group picture URLs will last forever
    _generatePictureURLs(ctx, group, -1, null, function(err) {
        if (err) {
            return callback(err);
        }

        opts.displayName = group.displayName;
        opts.url = baseUrl + group.profilePath;

        if (group.picture.small) {
            opts.ext[ActivityConstants.properties.OAE_THUMBNAIL] = new ActivityModel.ActivityMediaLink(group.picture.small, PrincipalsConstants.picture.size.SMALL , PrincipalsConstants.picture.size.SMALL);
        }

        if (group.picture.medium) {
            opts.image = new ActivityModel.ActivityMediaLink(group.picture.medium, PrincipalsConstants.picture.size.MEDIUM , PrincipalsConstants.picture.size.MEDIUM);
        }

        // Extension properties
        opts.ext[ActivityConstants.properties.OAE_VISIBILITY] = group.visibility;

        if (!group.deleted) {
            opts.ext[ActivityConstants.properties.OAE_PROFILEPATH] = group.profilePath;
        }

        opts.ext[ActivityConstants.properties.OAE_JOINABLE] = group.joinable;

        return callback(null, new ActivityModel.ActivityEntity('group', globalId, group.visibility, opts));
    });
};

/**
 * Transform persisted group activity entities that can be used in an activity
 * stream. The group property will be taken from the persisted entity, scrubbed
 * and returned as the "transformed entity"
 *
 * For more details on the transformed entity model, @see ActivityAPI#registerActivityEntityType
 *
 * @param  {Context}    ctx                     Standard context object containing the current user and the current tenant
 * @param  {Object[]}   groupInfos              The group info objects to transform
 * @param  {String}     groupInfos[i].groupId   The id of the group
 * @param  {Group}      [groupInfos[i].group]   The group object. If not specified, the generated entity with be abbreviated with just the information available
 * @param  {Function}   callback                Standard callback function
 * @param  {Object}     callback.err            An error that occurred, if any
 * @param  {Group[]}      callback.groups       The transformed group objects
 */
var transformPersistentGroupActivityEntitiesToInternal = module.exports.transformPersistentGroupActivityEntitiesToInternal = function(ctx, groupInfos, callback, _groupInfos, _entities) {
    _groupInfos = _groupInfos || groupInfos.slice();
    _entities = _entities || [];
    if (_.isEmpty(_groupInfos)) {
        return callback(null, _entities);
    }

    var groupInfo = _groupInfos.sshift();
    _transformPersistentGroupActivityEntityToInternal(ctx, groupInfo.groupId, groupInfo.group, function(err, entity) {
        if (err) {
            return callback(err);
        }

        _entities.push(entity);
        return transformPersistentGroupActivityEntitiesToInternal(ctx, groupInfos, callback, _groupInfos, _entities);
    });
};

/**
 * Transform a persisted group activity entity that can be used in an activity stream. The group property will be
 * taken from the persisted entity, scrubbed and returned as the "transformed entity"
 *
 * For more details on the transformed entity model, @see ActivityAPI#registerActivityEntityType
 *
 * @param  {Context}    ctx                 Standard context object containing the current user and the current tenant
 * @param  {String}     groupId             The id of the group
 * @param  {Group}      [group]             The group object. If not specified, the generated entity with be abbreviated with just the information available
 * @param  {Function}   callback            Standard callback function
 * @param  {Object}     callback.err        An error that occurred, if any
 * @param  {Group}      callback.group      The transformed group object
 * @api private
 */
var _transformPersistentGroupActivityEntityToInternal = function(ctx, groupId, group, callback) {
    if (!group) {
        return setImmediate(callback, null, {'id': groupId});
    }

    // Signed group picture URLs will last forever
    _generatePictureURLs(ctx, group, -1, null, function(err) {
        if (err) {
            return callback(err);
        }

        return callback(null, group);
    });
};

/**
 * Replace the URI properties with signed URL paths to actually download the files
 *
 * @param  {Context}            ctx             Standard context object containing the current user and the current tenant
 * @param  {Group[]|User[]}     principals      The principals for which to generate the picture URL paths
 * @param  {Number}             [duration]      The approximate time in seconds for which the generated picture URLs will be valid. Default: 1 week
 * @param  {Number}             [offset]        The minimum time in seconds for which the generated picture URLs will be valid. Default: 1 week
 * @param  {Function}           callback        Standard callback function
 * @param  {Object}             callback.err    An error that occurred, if any
 * @api private
 */
var _generatePictureURLs = function(ctx, principals, duration, offset, callback) {
    var signedProperties = {
        'smallUri': 'small',
        'mediumUri': 'medium',
        'largeUri': 'large'
    };
    var opts = {
        'duration': duration,
        'offset': offset
    };
    return ContentUtil.signObjectUrlProperties(ctx, _.pluck(principals, 'picture'), signedProperties, opts, callback);
};
