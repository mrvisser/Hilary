/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');

var log = require('oae-logger').logger('oae-activity-notifications');
var PrincipalsDAO = require('oae-principals/lib/internal/dao');
var Validator = require('oae-authz/lib/validator').Validator;

var ActivityConstants = require('oae-activity/lib/constants').ActivityConstants;
var ActivityEmitter = require('./emitter');


ActivityEmitter.on(ActivityConstants.events.DELIVERED_NOTIFICATIONS, function(deliveredNotifications) {
    var userIds = _.keys(deliveredNotifications);
    markNotificationsUnread(userIds, function(err) {
        if (err) {
            // We don't have to break on an error here, we can still send e-mails
            log().error({
                'err': new Error(err.msg),
                'userIds': userIds
            }, 'Could not mark notifications as unread');
        }

        _.each(deliveredNotifications, function(activities, userId) {
            _.each(activities, function(activity) {
                log().info({'userId': userId, 'activity': activity}, 'TODO: Send an e-mail LOL');
            });
        });
    });
});

var markNotificationsRead = module.exports.markNotificationsRead = function(userId, callback) {
    // Extra protection, since we're using a DAO, to ensure that we don't upsert a non-principal row
    // into the Principals CF
    var validator = new Validator();
    validator.check(userId, {'code': 400, 'msg': 'Can only mark notifications read for a user id'}).isUserId();
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    var lastReadTime = Date.now();
    var profileFields = {
        'notificationsUnread': false,
        'notificationsLastRead': lastReadTime
    };
    PrincipalsDAO.updatePrincipals([userId], profileFields, function(err) {
        if (err) {
            return callback(err);
        }

        return callback(null, lastReadTime);
    });
};

var markNotificationsUnread = module.exports.markNotificationsUnread = function(userIds, callback) {
    // Extra protection, since we're using a DAO, to ensure that we don't nulk upsert a non-principal rows
    // into the Principals CF
    var validator = new Validator();
    _.each(userIds, function(userId) {
        validator.check(userId, {'code': 400, 'msg': 'Can only mark notifications unread for a user id'}).isUserId();
    });
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    PrincipalsDAO.updatePrincipals(userIds, {'notificationsUnread': true}, callback);
};
