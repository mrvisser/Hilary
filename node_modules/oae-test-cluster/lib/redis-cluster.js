var log = require('oae-logger').logger('redis-cluster');
var redis = require('oae-util/lib/redis');

var readErrorCount = 0;
var readInvalidCount = 0;
var readValidCount = 0;

var writeErrorCount = 0;
var writeValidCount = 0;

var lastError = -1;

var begin = module.exports.begin = function(index, testPrev) {
    process.nextTick(function() {
        index = index || 0;

        if (index % 5000 === 0) {
            log().info({
                'index': index,
                'readErrorCount': readErrorCount,
                'readInvalidCount': readInvalidCount,
                'readValidCount': readValidCount,
                'writeErrorCount': writeErrorCount,
                'writeValidCount': writeValidCount
            }, 'Test status');
        }

        if (testPrev) {
            var testVal = index - 1;
            return redis.getClient().get('cluster-test-' + testVal, function(err, val) {
                if (err) {
                    _logError({'err': err, 'index': index}, 'Error testing value.');
                    readErrorCount++;
                    return begin(index);
                } else if (val != testVal) {
                    log().warn('Read value %s for index %s', val, testVal);
                    readInvalidCount++;
                    return begin(index);
                }

                readValidCount++;
                return begin(index);
            });
        } else {
            return redis.getClient().setex('cluster-test-' + index, 1, ''+index, function(err) {
                if (err) {
                    _logError({'err': err, 'index': index}, 'Error setting value.');
                    writeErrorCount++;
                    return begin(++index);
                }

                writeValidCount++;
                return begin(++index, true);
            });
        }
    });
};

var _logError = function(obj, message) {
    var logIt = false;
    var now = Date.now();
    if (lastError === -1) {
        logIt = true;
        lastError = now;
    } else if (now - lastError > 1000) {
        // Log only one error per second
        logIt = true;
        lastError = now;
    }

    if (logIt) {
        log().error(obj, message);
    }
}
