
var log = require('oae-logger').logger('oae-mq-failover');
var MQ = require('oae-util/lib/mq');

var receiveInvalid = 0;
var receiveInaccurate = 0;

var sendWhileDown = 0;
var index = 0;
var count = 0;

var begin = module.exports.begin = function() {
    _ping();
    _sendWhileDown();
};

//////////////////////////
// SEND WHILE DOWN TEST //
//////////////////////////

var _sendWhileDown = function() {
    process.nextTick(function() {
        var data = {'value': ++sendWhileDown};
        log().info({'data': data}, 'Sending to send-while-down');
        MQ.submit('oae-mq-failover/send-while-down', data);
    });

    setTimeout(_sendWhileDown, 1000);
};

MQ.bind('oae-mq-failover/send-while-down', function(data, callback) {
    log().info({'data': data}, 'Received from send-while-down');
    callback();
});

///////////////
// PING TEST //
///////////////

var _ping = function() {
    // Send a task, recording the value (index) and task state
    process.nextTick(function() {
        index++;
        MQ.submit('oae-mq-failover/ping', {'value': index}, function() {
            count++;
        });
    });
};

MQ.bind('oae-mq-failover/ping', function(data, callback) {
    count--;

    if (index % 1000 === 0) {
        log().info({
            'receiveInvalid': receiveInvalid,
            'receiveInaccurate': receiveInaccurate,
            'index': index,
            'count': count
        }, 'Test status');
    }

    if (!data) {
        receiveInvalid++;
        log().error('Received empty data');
    } else if (!data.value) {
        receiveInvalid++;
        log().error('Received empty value');
    } else if (data.value !== index) {
        receiveInaccurate++;
        log().error({'data': data, 'index': index}, 'Received inaccurate data');
    }

    _ping();
    callback();

}, {'subscribe': {'prefetchCount': 1}});