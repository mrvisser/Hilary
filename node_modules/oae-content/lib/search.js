/*!
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
var _ = require('underscore');
var util = require('util');

var AuthzAPI = require('oae-authz');
var AuthzUtil = require('oae-authz/lib/util');
var IndexTask = require('oae-search/lib/model').IndexTask;
var LibraryAPI = require('oae-library');
var MQ = require('oae-util/lib/mq');
var SearchAPI = require('oae-search');
var SearchConstants = require('oae-search/lib/constants').SearchConstants;
var SearchUtil = require('oae-search/lib/util');
var Signature = require('oae-util/lib/signature');
var TenantsAPI = require('oae-tenants');

var ContentAPI = require('oae-content');
var ContentConstants = require('oae-content/lib/constants').ContentConstants;
var ContentDAO = require('oae-content/lib/internal/dao');
var ContentUtil = require('oae-content/lib/internal/util');



//////////////////////
// SEARCH ENDPOINTS //
//////////////////////

LibraryAPI.Search.registerLibrarySearch('content-library', 'content');
SearchAPI.registerSearch('relatedcontent', require('./searches/relatedcontent'));



////////////////////
// INDEXING TASKS //
////////////////////

// Binds the local events to the MQ task queue to assign indexing jobs

ContentAPI.on(ContentConstants.events.CREATED_CONTENT, function(ctx, content, revision, members) {
    var indexTasks = [
        new IndexTask('content', {'id': content.id}),
        new IndexTask('content_members', {'id': content.id})
    ];
    SearchAPI.submitIndexTasks(indexTasks);
});

ContentAPI.on(ContentConstants.events.UPDATED_CONTENT, function(ctx, newContent, oldContent, revision) {
    var indexTasks = [
        new IndexTask('content', {'id': newContent.id})
    ];
    SearchAPI.submitIndexTasks(indexTasks);
});

ContentAPI.on(ContentConstants.events.UPDATED_CONTENT_MEMBERS, function(ctx, content) {
    var indexTasks = [
        new IndexTask('content_members', {'id': content.id})
    ];
    SearchAPI.submitIndexTasks(indexTasks);
});

ContentAPI.on(ContentConstants.events.UPDATED_CONTENT_PREVIEW, function(ctx, contentId, content) {
    var indexTasks = [
        new IndexTask('content', {'id': contentId})
    ];
    SearchAPI.submitIndexTasks(indexTasks);
});

ContentAPI.on(ContentConstants.events.UPDATED_CONTENT_BODY, function(ctx, newContentObj, oldContentObj, revision) {
    var indexTasks = [
        new IndexTask('content', {'id': newContentObj.id})
    ];
    SearchAPI.submitIndexTasks(indexTasks);
});

ContentAPI.on(ContentConstants.events.DELETED_CONTENT, function(ctx, contentId) {
    MQ.submit(SearchConstants.mq.TASK_DELETE_DOCUMENT, {'resourceType': 'content', 'id': contentId});
});



////////////////////////
// DOCUMENT PRODUCERS //
////////////////////////

/**
 * Produces search documents for 'content' resources
 *
 * @see SearchAPI#registerSearchDocumentProducer
 * @api private
 */
var _produceContentSearchDocument = function(data, callback) {
    ContentDAO.Content.getContent(data.id, function(err, content) {
        if (err) {
            return callback(null, err);
        }

        // Allow full-text search on name and description, but only if they are specified. We also sort on this text
        var fullText = _.compact([content.displayName, content.description]).join(' ');

        // Add all properties for the resource document metadata
        var doc = {
            'resourceType': 'content',
            'resourceSubType': content.resourceSubType,
            'id': content.id,
            'tenantAlias': content.tenant.alias,
            'displayName': content.displayName,
            'visibility': content.visibility,
            'q_high': content.displayName,
            'q_low': fullText,
            'sort': fullText,
            '_extra': {
                'lastModified': content.lastModified
            }
        };

        if (content.resourceSubType === 'file') {
            doc._extra.mime = content.mime;
        }

        if (content.previews.thumbnailUri) {
            doc.thumbnailUrl = content.previews.thumbnailUri;
        }

        if (content.description) {
            doc.description = content.description;
        }

        if (content.resourceSubType === 'collabdoc') {
            // If this is a collaboration document, we have to add the html to the index
            ContentDAO.Revisions.getRevision(content.latestRevisionId, function(err, revision) {
                if (err) {
                    return callback(err);
                }

                // TODO Replace with child documentv
                if (revision && revision.etherpadHtml) {
                    doc.q_low += revision.etherpadHtml;
                    doc.sort += revision.etherpadHtml;
                }

                return callback(null, doc);
            });
        } else {
            return callback(null, doc);
        }
    });
};

/**
 * Produces a search document for access scoping 'content' resources
 *
 * @see SearchAPI#registerSearchDocumentProducer
 * @api private
 */
var _produceContentSearchMemberDocument = function(data, callback) {
    AuthzAPI.getAuthzMembers(data.id, null, 10000, function(err, members) {
        if (err) {
            return callback(err);
        }

        var memberIds = _.map(members, function(member) { return member.id; });
        var childDoc = SearchUtil.createMembersDocument(data.id, memberIds);
        return callback(null, childDoc);
    });
};

SearchAPI.registerSearchDocumentProducer('content', _produceContentSearchDocument);
SearchAPI.registerSearchDocumentProducer('content_members', _produceContentSearchMemberDocument);



///////////////////////////
// DOCUMENT TRANSFORMERS //
///////////////////////////

/**
 * Given an array of content search documents, transform them into search documents suitable to be displayed to the user in context.
 *
 * @param  {Context}   ctx             The current context
 * @param  {Object}    docs            A hash, keyed by the document id, while the value is the document to transform
 * @param  {Function}  callback        Invoked when the process completes
 * @param  {Object}    callback.err    An error that occurred, if any
 * @param  {Object}    callback.docs   The transformed docs, in the same form as the `docs` parameter.
 * @api private
 */
var _transformContentDocuments = function(ctx, docs, callback) {
    var transformedDocs = {};
    var principalId = (ctx.user() ? ctx.user().id : null);
    _.each(docs, function(doc, docId) {
        var result = _.extend({}, doc.fields, {'id': doc['_id']});
        result.lastModified = doc.fields._extra.lastModified;
        if (doc.fields._extra.mime) {
            result.mime = doc.fields._extra.mime;
        }
        if (doc.fields.thumbnailUrl && result.lastModified) {
            result.thumbnailUrl = ContentUtil.getDownloadUrlForUri(principalId, ctx.tenant().alias, doc.fields.thumbnailUrl);
        }
        result.tenant = TenantsAPI.getTenant(result.tenantAlias).compact();
        result.profilePath = '/content/' + result.tenant.alias + '/' + AuthzUtil.getResourceFromId(result.id).resourceId;

        transformedDocs[docId] = result;
    });

    return callback(null, transformedDocs);
};

// Bind the transformer to the search API
SearchAPI.registerSearchDocumentTransformer('content', _transformContentDocuments);



/////////////////////////
// REINDEX ALL HANDLER //
/////////////////////////

SearchAPI.registerReindexAllHandler('content', function(callback) {

    /*!
     * Handles each iteration of the ContentDAO iterate all method, firing tasks for all content to
     * be reindexed.
     *
     * @see ContentDAO.Content#iterateAll
     * @api private
     */
    var _onEach = function(contentRows, done) {
        var indexTasks = [];
        _.each(contentRows, function(contentRow) {
            indexTasks.push(new IndexTask('content', {'id': contentRow.contentId}));
            indexTasks.push(new IndexTask('content_members', {'id': contentRow.contentId}));
        });
        SearchAPI.submitIndexTasks(indexTasks, done);
    };

    ContentDAO.Content.iterateAll(['contentId'], 100, _onEach, callback);
});
