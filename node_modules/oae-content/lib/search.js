/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
var _ = require('underscore');
var AuthzUtil = require('oae-authz/lib/util');
var SearchAPI = require('oae-search');

/**
 * Index a content item in the indexer.
 *
 * @param {Content}     content         The content item to index
 * @param {String[]}    members         An array of principal ids of principals that have access to the content
 * @param {Function}    callback        Invoked when the process completes
 * @param {Object}      callback.err    An error that occurred, if any
 */
module.exports.indexContent = function(content, members, callback) {
    members = members || [];

    var id = content.contentId;
    var tenantId = AuthzUtil.getPrincipalFromId(id).tenantId;
    var visibility = content.visibility;
    var general = '';

    if (content.name) {
        general += ' ' + content.name;
    }

    if (content.description) {
        general += ' ' + content.description;
    }

    general = general.trim();
    sort = general;

    var contentDoc = {
        id: id,
        tenantId: tenantId,
        name: content.name,
        description: content.description,
        contentType: content.contentType,
        visibility: visibility,
        general: general,
        sort: sort,
        access: members
    };

    SearchAPI.index('content', contentDoc, callback);
}

/**
 * Delete the content item from the index.
 *
 * @param {String}      contentId       The id of the content item to delete from the index
 * @param {Function}    callback        Invoked when the process completes
 * @param {Object}      callback.err    An error that occurred, if any
 */
module.exports.deleteContent = function(contentId, callback) {
    SearchAPI.delete('content', contentId, callback);
}
