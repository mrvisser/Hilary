/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var Cassandra = require('oae-util/lib/cassandra');
var SearchAPI = require('oae-search');
var SearchUtil = require('oae-search/lib/util');

module.exports = function(app, callback) {
    ensureSchema(function(err) {
        if (err) {
            return callback(err);
        }

        ensureSearchTypes(callback);
    });
};

/**
 * Ensure that the all of the content-related schemas are created. If they already exist, this method will not do anything
 * @param  {Function}         callback       Standard callback function
 * @param  {Object}           callback.err   Error object, containing the error message
 */
var ensureSchema = function(callback) {
    Cassandra.createColumnFamilies({
        'Content': "create columnfamily Content (contentId text PRIMARY KEY, tenant text, visibility text, name text, description text, contentType text, createdBy text, created text, lastModified text);",
        'LibraryByPrincipal': "create columnfamily LibraryByPrincipal (principalId text PRIMARY KEY);",
    }, callback);
};

/**
 * Ensure that the search types for content exist. If they don't, they are created.
 *
 * @param {Function}    callback        Invoked when the process completes
 * @param {Object}      callback.err    An error that occurred, if any
 */
var ensureSearchTypes = function(callback) {

    // register the document transformer
    SearchAPI.registerDocumentTransformer('content', SearchUtil.createPropertyDocumentTransformer([ 'tenantId', 'name', 'description',
        'contentType', 'visibility']));

    // indices.query.bool.max_clause_count
    var contentProfileType = {
        'tenantId': { 'type': 'string', 'store': 'no', 'index': 'not_analyzed' },
        'name': { 'type': 'string', 'store': 'yes', 'index': 'no' },
        'description': { 'type': 'string', 'store': 'yes', 'index': 'no' },
        'contentType': { 'type': 'string', 'store': 'yes', 'index': 'no' },
        'visibility': { 'type': 'string', 'store': 'yes', 'index': 'not_analyzed' },
        'general': { 'type': 'string', 'store': 'no', 'index': 'analyzed' },
        'sort': { 'type': 'string', 'store': 'no', 'index': 'not_analyzed' },
        'access': { 'type': 'string', 'store': 'no', 'index': 'not_analyzed' }
    };

    SearchAPI.putMapping('content', contentProfileType, callback);
}
