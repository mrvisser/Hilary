/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
var log = require('oae-logger').logger('search');
var SearchAPI = require('oae-search');

module.exports = function(app, callback) {
    log().info('Initializing search module');

    var config = app.config.search;
    var hosts = config.hosts;
    var index = config.index;
    var destroy = config.index.destroyOnStartup === true;

    SearchAPI.refreshSearchConfiguration(index.name, { hosts: config.hosts }, index.allowRefresh === true);
    ensureIndex(index.name, index.settings, destroy, callback);
}

/**
 * Ensure that the index identified by the index name exists.
 * 
 * @param   {String}        indexName           The name of the index
 * @param   {Object}        indexSettings       The settings of the index
 * @param   {Object[]}      indexSettings.hosts An array of hosts (e.g., `[{ "host": "localhost", "port": 9200 }]`) to use
 * @param   {Boolean}       destroy             If true, the index will be destroyed if it exists, then recreated.
 * @param   {Function}      callback            Invoked when the process completes
 * @param   {Object}        callback.err        An error that occurred, if any
 */
var ensureIndex = function(indexName, indexSettings, destroy, callback) {
    if (destroy) {
        SearchAPI.deleteIndex(indexName, function(err) {
            if (err) {
                return callback(err);
            }
            return SearchAPI.createIndex(indexName, indexSettings, callback);
        })
    } else {
        return SearchAPI.createIndex(indexName, indexSettings, callback);
    }
    
}