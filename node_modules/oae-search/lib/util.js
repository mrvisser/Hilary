/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
var _ = require('underscore');

/**
 * Get the standard search parameters from the given request.
 * 
 * @param   {Request}   req     The express Request object from which to extract the parameters.
 * @return  {Object}            The parameters extracted from the request that are relevant for search.
 */
module.exports.getSearchParams = function(req) {
    var q = req.query.q || '*';
    var sort = req.query.sort || 'asc';
    var from = req.query.from || '0';
    var size = req.query.size || '10';

    from = isNaN(from) ? 0 : from;
    size = isNaN(size) ? 10 : size;
    sort = (sort === 'asc' || sort === 'desc') ? sort : null;

    return {
        q: q,
        from: from,
        size: size,
        sort: sort
    };
}

/**
 * Create a basic document transformer that will map an enumerated set of property names to the transformed
 * document result.
 *
 * @param   {String[]}  properties  The properties to map from a raw search document to the transformed result
 * @return  {Object}                The transformed result document
 */
module.exports.createPropertyDocumentTransformer = function(properties) {
    return function(ctx, searchType, docs, transformerCallback) {
        var transformedDocs = {};
        _.values(docs).forEach(function(doc) {
            var transformedDoc = { '_id': doc._id };

            // add all the properties to the transformed doc
            properties.forEach(function(property) {
                transformedDoc[property] = doc._source[property];
            });

            transformedDocs[doc._id] = transformedDoc;
        });

        return transformerCallback(null, transformedDocs);
    };
}

/**
 * Converts a query and (optionally) a filter into an appropriate ElasticSearch Query DSL object.
 *
 * @param   {Object}    query   The ElasticSearch query representation.
 * @param   {Object}    filter  The ElasticSearch filter to apply. If `null`, then the resulting object will
 *                              simply not be a filtered query.
 * @param   {Object}    opts    An arbitrary set of additional options that contain top-level ES Query DSL parameters (e.g., size, limit, ...)
 * @return  {Object}            A valid ElasticSearch Query object that can be sent as a query.
 */
module.exports.createQuery = function(query, filter, opts) {
    if (filter) {
        // if we have filters, we need to create a 'filtered' query
        var data = {
            'query': {
                'filtered': {
                    'query': query,
                    'filter': filter
                }
            }
        };
    } else {
        // if it's just a query, we wrap it in a standard query.
        var data = {
            'query': query
        };
    }

    return _.extend(data, opts);
}

/**
 * Create an ElasticSearch 'OR' filter, wrapped around multiple other filters.
 *
 * @param   {Object}  args*     The filter objects to "OR" together
 * @return  {Object}            An ElasticSearch "OR" filter.
 */
module.exports.filterOr = function() {
    if (arguments.length === 0) {
        return null;
    }

    return { 'or': _.compact(arguments) };
}

/**
 * Create an ElasticSearch 'AND' filter, wrapped around multiple other filters.
 *
 * @param   {Object}  args*     The filter objects to "AND" together
 * @return  {Object}            An ElasticSearch "AND" filter.
 */
module.exports.filterAnd = function() {
    if (arguments.length === 0) {
        return null;
    }

    return { 'and': _.compact(arguments) };
}

/**
 * Create an ElasticSearch 'terms' filter, wrapped around an array of values
 *
 * @param   {String}    field   The name of the field this term filters
 * @param   {String[]}  values  The values to filter on
 * @return  {Object}            An ElasticSearch 'terms' filter.
 */
module.exports.filterTerms = function(field, values) {
    if (!values || values.length === 0) {
        return null;
    }

    var filter = {'terms': {}};
    filter.terms[field] = values;
    return filter;
}

/**
 * Create an ElasticSearch 'term' filter, wrapped around a value
 *
 * @param   {String}    field   The name of the field this term filters
 * @param   {String}    value   The value to match
 * @return  {Object}            An ElasticSearch 'term' filter.
 */
module.exports.filterTerm = function(field, value) {
    if (!value) {
        return null;
    }

    var filter = {'term': {}};
    filter.term[field] = value;
    return filter;
}
