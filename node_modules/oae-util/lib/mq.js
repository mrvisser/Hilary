/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var amqp = require('amqp');
var _ = require('underscore');

var log = require('oae-logger').logger('mq');

var connection = null;
var queueExchange = null;
var queues = {};

var Constants = module.exports.Constants = {
    'DEFAULT_TASK_EXCHANGE_NAME': 'oae-taskexchange',
    'DEFAULT_TASK_EXCHANGE_OPTS': {
        'type': 'direct',
        'durable': true,
        'autoDelete': false

    },
    'DEFAULT_TASK_QUEUE_OPTS': {
        'durable': true,
        'autoDelete': false
    }
};

/**
 * Initialize the Message Queue system so that it can start sending and receiving messages.
 *
 * @param   {Object}    mqConfig        The MQ Configuration object
 * @param   {Function}  callback        Invoked when initialization completes
 * @param   {Object}    callback.err    An error that occurred, if any
 */
var init = module.exports.init = function(mqConfig, callback) {
    if (!connection) {
        log().info('Initializing RabbitMQ connector.');

        connection = amqp.createConnection(mqConfig);

        connection.on('error', function(err) {
            log().error({'err': err}, 'Error connecting to RabbitMQ.');
            return callback(err);
        });

        connection.on('close', function() {
            log().info('Closed connection to RabbitMQ');
        });

        connection.on('ready', function() {
            log().info('Connection to RabbitMQ established.');

            // initialize the exchange for the job queues
            connection.exchange(Constants.DEFAULT_TASK_EXCHANGE_NAME, Constants.DEFAULT_TASK_EXCHANGE_OPTS, function(exchange) {
                queueExchange = exchange;
                return callback();
            });
        });
    } else {
        log().warn('Attempted to initialize an existing RabbitMQ connector.');
    }
};

/**
 * Bind a function to listen for a particular type of task. When bound, the node effectively becomes a "worker" for that task,
 * meaning when it receives a particular job, no other node active in the cluster will receive it.
 *
 * @param   {String}    name            The unique label that identifies the type of job this binding is listening to
 * @param   {Function}  listener        The function that will handle tasks of the given type
 * @param   {Object}    listener.data   The data that was sent in the job. This is different depending on the type of job
 * @param   {Object}    [callback]      Invoked after the listener has been bound to the MQ
 */
var bind = module.exports.bind = function(name, listener, callback) {
    opts = opts || {};

    if (queues[name]) {
        log().warn({
            'name': name,
            'opts': opts,
            'listener': listener
        }, 'Attempted to bind duplicate listener for job queue. Aborting.');
        return callback();
    }

    connection.queue(name, Constants.DEFAULT_TASK_QUEUE_OPTS, function(queue) {
        queues[name] = queue;
        log().info({'name': name, 'opts': opts, 'queue': queue}, 'Created a RabbitMQ task queue');

        // bind the queue to the task exchange. The routing key is the same as the name of the job queue
        queue.bind(Constants.DEFAULT_TASK_EXCHANGE_NAME, name, function() {

            // bind the listener to the queue, to handle all jobs of the given `name` type

            // TODO: prefetchCount should probably be configurable. It determines the number of jobs from this queue that will be handled concurrently for this node process
            queue.subscribe({'ack': true, 'prefetchCount': 15}, function(data, headers, deliveryInfo) {
                log().trace({
                    'name': name,
                    'data': data,
                    'headers': headers,
                    'deliveryInfo': deliveryInfo
                }, 'Received an MQ message.');

                // pass it to the listener
                try {
                    listener(data);
                } catch (err) {
                    log().error({
                        'err': err,
                        'name': name,
                        'data': data
                    }, 'Exception raised while handling job.');
                }

                // shift the element off the queue.
                queue.shift();
            });

            return callback();
        });
    });
}

/**
 * Unbind this node as a worker for the specified type of task.
 * 
 * @param   {String}    name    The name of the task to which to unbind this node
 */
var unbind = module.exports.unbind = function(name) {
    _destroyQueue(name);
}

/**
 * Submit a job to the task queue to be picked up by some arbitrary node in the cluster.
 *
 * @param   {String}    name        The type of job to submit
 * @param   {Object}    data        The data to send with the task. This will be received by the worker for this type of task
 * @param   {Function}  callback    Invoked when the job has been submitted
 */
var submit = module.exports.submit = function(name, data, callback) {
    callback = callback || function() {};

    // we publish with the routing key `name`, which routes it to the queue (if any) that is listening on this key
    queueExchange.publish(name, data, {});
    return callback();
}

/**
 * Destroy the managed task queue with the given name.
 *
 * @param   {String}    name    The type of the job message queue to destroy.
 */
var _destroyQueue = function(name) {
    if (!queues[name]) {
        log().warn({'name': name}, 'Attempted to unbind listener from non-existant job queue. Ignoring.');
    }

    try {
        queue.destroy({
            'ifUnused': true,
            'ifEmpty': true
        });
    } catch (err) {
        log().error({'err': err, 'name': name}, 'Error destroying job queue. Ignoring.');
    }
    delete queues[name];
}