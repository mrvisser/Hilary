/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');

var ConfigAPI = require('oae-config');
var log = require('oae-logger').logger('oae-authentication');
var TenantsUtil = require('oae-tenants/lib/util');

var AuthenticationAPI = require('oae-authentication');
var AuthenticationConfig = ConfigAPI.config('oae-authentication');
var AuthenticationConstants = require('oae-authentication/lib/constants').AuthenticationConstants;
var AuthenticationUtil = require('oae-authentication/lib/util');

var CasStrategy = require('passport-cas').Strategy;

module.exports = function() {
    var strategy = {};

    /**
     * @see oae-authentication/lib/strategy#shouldBeEnabled
     */
    strategy.shouldBeEnabled = function(tenantAlias, callback) {
        return AuthenticationConfig.getValue(tenantAlias, AuthenticationConstants.providers.CAS, 'enabled', callback);
    };

    /**
     * @see oae-authentication/lib/strategy#getPassportStrategy
     */
    strategy.getPassportStrategy = function(tenant, callback) {
        var authConfigValueNames = ['url', 'loginPath', 'validatePath',
            'mapDisplayName', 'mapEmail', 'mapLocale', 'useSaml'];

        // We fetch the config values in the getPassportStrategy so it can be re-configured at run-time
        AuthenticationConfig.getValues(tenant.alias, AuthenticationConstants.provider.CAS, authConfigValueNames, function(err, authConfig) {
            if (err) {
                return callback(err);
            }

            authConfig.mapDisplayName = authConfig.mapDisplayName.toLowerCase();
            authConfig.mapEmail = authConfig.mapEmail.toLowerCase();
            authConfig.mapLocale = authConfig.mapLocale.toLowerCase();

            var serverBase = TenantsUtil.getBaseUrl(tenant);

            var passportStrategy = new CasStrategy({
                'allow': '',
                'appLogoutPath': '/api/auth/logout',
                'ssoBaseURL': authConfig.casHost,
                'serverBaseURL': serverBase,
                'version': 'CAS3.0',
                'loginURL': authConfig.loginPath,
                'passReqToCallback': true,
                'serviceURL': '/api/auth/cas/callback',
                'validateURL': authConfig.validatePath,
                'useSaml': authConfig.useSaml
            }, function(req, casResponse, done) {
                log().trace({
                    'tenant': tenant,
                    'casResponse': casResponse
                }, 'Received CAS authentication callback.');

                var username = casResponse.user;
                var displayName = casResponse.user;
                var opts = {
                    'authoritative': true
                };

                // If the CAS server returned attributes we try to map them to OAE profile parameters
                if (casResponse.attributes) {
                    // Try to use a mapped displayname rather than the default CAS id
                    var mappedDisplayName = AuthenticationUtil.renderTemplate(authConfig.mapDisplayName, casResponse.attributes);
                    if (mappedDisplayName) {
                        displayName = mappedDisplayName;
                    }

                    // Set the optional profile parameters
                    AuthenticationUtil.setProfileParameter(opts, 'email', authConfig.mapEmail, casResponse.attributes);
                    AuthenticationUtil.setProfileParameter(opts, 'locale', authConfig.mapLocale, casResponse.attributes);
                }

                AuthenticationUtil.handleExternalGetOrCreateUser(req, AuthenticationConstants.providers.CAS, username, null, displayName, opts, done);
            });

            return callback(null, passportStrategy);
        });
    };

    /**
     * Sends the user to the configured CAS logout redirect URL
     *
     * @param  {Request}    req     The expressJS request object
     * @param  {Response}   res     The expressJS response object
     */
    strategy.logout = function(req, res) {
        var tenant = req.ctx.tenant();
        AuthenticationConfig.getValue(tenant.alias, AuthenticationConstants.providers.CAS, 'logoutUrl', function(err, logoutUrl) {
            if (err) {
                log().warn({'err': err}, 'An error occurred determining CAS logout URL');
            }

            // Regardless if there was an error, we should still redirect them
            // even if we failed to find the logout url. We default to the index
            // page
            return res.redirect(logoutUrl || '/');
        });
    };

    // Register our strategy
    AuthenticationAPI.registerStrategy(AuthenticationConstants.providers.CAS, strategy);
    return strategy;
};
