/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var LDAPStrategy = require('passport-ldapauth').Strategy;

var ConfigAPI = require('oae-config');
var Context = require('oae-context').Context;
var log = require('oae-logger').logger('oae-authentication');

var AuthenticationAPI = require('oae-authentication');
var AuthenticationConfig = ConfigAPI.config('oae-authentication');
var AuthenticationConstants = require('oae-authentication/lib/constants').AuthenticationConstants;


module.exports = function() {
    var strategy = {};

    /**
     * @see oae-authentication/lib/strategy#shouldBeEnabled
     */
    strategy.shouldBeEnabled = function(tenantAlias, callback) {
        return AuthenticationConfig.getValue(tenantAlias, 'ldap', 'enabled', callback);
    };

    /**
     * @see oae-authentication/lib/strategy#getPassportStrategy
     */
    strategy.getPassportStrategy = function(tenant, callback) {
        var authConfigValueNames = ['url', 'adminDn', 'adminPassword',
            'searchBase', 'searchFilter', 'mapDisplayName', 'mapExternalId',
            'mapEmail', 'mapLocale'];

        AuthenticationConfig.getValues(tenant.alias, AuthenticationConstants.providers.LDAP, authConfigValueNames, function(err, authConfig) {
            if (err) {
                return callback(err);
            } else if (!authConfig.mapExternalId || !authConfig.mapDisplayName) {
                log().error('The LDAP externalId and displayName attributes must be configured in order for this strategy to be enabled.');
                return callback(null, false);
            }

            var options = {
                'server': {
                    'url': authConfig.url,
                    'adminDn': authConfig.adminDn,
                    'adminPassword': authConfig.adminPassword,
                    'searchBase': authConfig.searchBase,
                    'searchFilter': authConfig.searchFilter
                }
            };
            var passportStrategy = new LDAPStrategy(options, function(profile, done) {
                log().trace({
                    'tenant': tenant,
                    'profile': profile
                }, 'Received LDAP authentication callback.');

                // Re-use the username as the external id
                var externalId = profile[authConfig.mapExternalId];
                var displayName = profile[authConfig.mapDisplayName];
                var opts = {};
                if (authConfig.mapEmail) {
                    opts.email = profile[authConfig.mapEmail];
                    if (opts.email) {
                        opts.emailVerified = true;
                    }
                }
                if (authConfig.mapLocale) {
                    opts.locale = profile[authConfig.mapLocale];
                }

                var ctx = new Context(tenant, null);
                AuthenticationAPI.getOrCreateUser(ctx, AuthenticationConstants.providers.LDAP, externalId, null, displayName, opts, done);
            });

            return callback(null, passportStrategy);
        });
    };

    // Register our strategy.
    AuthenticationAPI.registerStrategy(AuthenticationConstants.providers.LDAP, strategy);
    return strategy;
};
